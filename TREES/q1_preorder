/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        Stack<TreeNode> st = new Stack<>();
        List<Integer> ans = new ArrayList<>();
        if(root==null) return ans;
        st.push(root);
        while(!st.isEmpty()){
            root = st.pop();
            ans.add(root);
            if(root.left!=null) st.push(root.left);
            if(root.right!=null) st.push(root.right); 
        }
        return ans;
    }
}


//-------Recursive----------

//  public List<Integer> preorderTraversal(TreeNode root) {
//         ArrayList<Integer> arr = new ArrayList<>();
//         return helper(arr, root); 
//     }
//     public List<Integer> helper(List<Integer> arr, TreeNode root){
//         if(root!=null){           
//             arr.add(root.val);
//             helper(arr, root.left);
//             helper(arr, root.right);
//         }
//         return arr;
//     }